diff --unified --recursive --text dwm-6.2/config.def.h dwm-6.2-mod/config.def.h
--- dwm-6.2/config.def.h	2019-02-02 14:55:28.000000000 +0200
+++ dwm-6.2-mod/config.def.h	2019-05-27 22:03:19.749231251 +0300
@@ -12,10 +12,12 @@
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+#define COLOR_CHEME_COUNT 3
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	{ "#ff0000", "#000000", "#000000" }
 };
 
 /* tagging */
diff --unified --recursive --text dwm-6.2/dwm.c dwm-6.2-mod/dwm.c
--- dwm-6.2/dwm.c	2019-05-27 21:58:40.009218017 +0300
+++ dwm-6.2-mod/dwm.c	2019-05-27 21:58:26.910217398 +0300
@@ -703,9 +703,42 @@
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - sw, 0, sw, bh, 0, stext, 0);
+		#define PARSER_BUF 256
+
+		int stext_index = strlen(stext);
+
+		static char word[PARSER_BUF] = {0}; 
+		int word_index = PARSER_BUF-1;
+
+		int first = 2; // Add 2px padding to only the first segment
+
+		// Loop the status backwards, copy characters, draw and flush on \xN
+		while(stext_index--){
+			word[--word_index] = stext[stext_index];
+
+			int override = 	(stext_index == 0)
+						||	(word_index  == 0);
+			int match = 	stext[stext_index] 		== '\\' 
+					 	&&  stext[stext_index+1] 	== 'x';
+
+			if( !(match || override) ) continue;
+
+			unsigned int profile = 0;
+			if( match ){
+				profile = stext[stext_index+2] - '0';
+				if(profile >= COLOR_CHEME_COUNT) profile = 0;
+				word_index+=3; 
+			}
+
+			int sw_word = TEXTW(word+word_index) - lrpad + first;
+			sw += sw_word;
+			first = 0;
+
+			drw_setscheme(drw, scheme[profile] );		
+			drw_text(drw, m->ww - sw, 0, sw_word, bh, 0, word+word_index, 0);
+
+			word_index = PARSER_BUF-1;
+		}
 	}
 
 	for (c = m->clients; c; c = c->next) {
